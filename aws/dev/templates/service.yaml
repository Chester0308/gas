---
AWSTemplateFormatVersion: 2010-09-09


Parameters:
  AppEnv:
    Type: String

  AppName:
    Type: String

  Cluster:
    Type: String

  DesiredCount:
    Type: Number
    Default: 1

  TargetGroup:
    Type: String

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

  ECSSecurityGroup:
    Type: String

  RDSEndpoint:
    Type: String
    Description: Specify RDS Endpoint SecretsManager arn

  RDSReadEndpoint:
    Type: String
    Description: Specify RDS ReadEndpoint SecretsManager arn

  ECRImageTag:
    Type: String
    Description: Specify ECR Image Tag SecretsManager arn

  MaxCapacity:
    Type: Number
    Default: 4

  MinCapacity:
    Type: Number
    Default: 1

  RDSUserPasswordSecret:
    Type: String

  RDSAppDatabaseName:
    Type: String

  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain log events.
    Type: Number
    Default: '365'
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  GameTop:
    Type: String

  GameEnd:
    Type: String

  AppDebug:
    Type: String


Resources:
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub ${AppEnv}-${AppName}-ecs-task-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AppEnv}-${AppName}*
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key:*
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - kms:Decrypt

  ECSAutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppEnv}-${AppName}-cluster-autoscaling-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService

  NginxLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AppEnv}-${AppName}-nginx
      RetentionInDays: !Ref LogsRetentionInDays

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AppEnv}-${AppName}-api
      RetentionInDays: !Ref LogsRetentionInDays

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AppEnv}-${AppName}-ecs-service
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}
      RequiresCompatibilities:
        - "FARGATE"
      Memory: 4096
      Cpu: 2048
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: nginx
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppEnv}-${AppName}-nginx:latest
          Essential: true
          Memory: 1024
          PortMappings:
            - ContainerPort: 80
          MountPoints:
            - SourceVolume: php-fpm-socket
              ContainerPath: /var/run/php-fpm
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref NginxLogGroup
              awslogs-stream-prefix: !Sub ${AppEnv}-${AppName}-nginx
        - Name: api
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppEnv}-${AppName}-api:latest
          Essential: true
          Memory: 3072
          MountPoints:
            - SourceVolume: php-fpm-socket
              ContainerPath: /var/run/php-fpm
          Environment:
            - Name: DB_USERNAME
              Value: !Sub ${AppEnv}_app
            - Name: DB_DATABASE
              Value: !Ref RDSAppDatabaseName
            - Name: GAME_TOP
              Value: !Ref GameTop
            - Name: GAME_END
              Value: !Ref GameEnd
            - Name: APP_DEBUG
              Value: !Ref AppDebug
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Ref RDSUserPasswordSecret
            - Name: DB_READ_HOST
              ValueFrom: !Ref RDSReadEndpoint
            - Name: DB_WRITE_HOST
              ValueFrom: !Ref RDSEndpoint
            - Name: ECR_IMAGE_TAG
              ValueFrom: !Ref ECRImageTag
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ApiLogGroup
              awslogs-stream-prefix: !Sub ${AppEnv}-${AppName}-api
      Volumes:
        - Name: php-fpm-socket

  ECSServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: FargateService
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub service/${Cluster}/${FargateService.Name}
      RoleARN: !GetAtt ECSAutoscalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSServiceScalingOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[+]ServiceCPUUtilHigh"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
        MinAdjustmentMagnitude: 1

  ECSServiceScalingInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[-]ServiceCPUUtilLow"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -50
        MinAdjustmentMagnitude: 1

  CloudWatchAlarmCPUScaleOut:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Containers CPU Utilization High
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '50'
      AlarmActions:
        - !Ref ECSServiceScalingOutPolicy
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt FargateService.Name
        - Name: ClusterName
          Value: !Ref Cluster
      ComparisonOperator: GreaterThanOrEqualToThreshold

  CloudWatchAlarmCPUScaleIn:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Containers CPU Utilization low
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '120'
      Threshold: '30'
      AlarmActions:
        - !Ref 'ECSServiceScalingInPolicy'
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt FargateService.Name
        - Name: ClusterName
          Value: !Ref Cluster
      ComparisonOperator: LessThanOrEqualToThreshold

Outputs:
  Service:
    Value: !Ref FargateService
